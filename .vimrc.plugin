" ----------------------------------------------------------------------------
"
"                           Plugins and Settings v3.0.0
"                              Plug with 22 Plugins
"
" ----------------------------------------------------------------------------

" Install Vim-Plug if we don't already have it
if empty(glob("~/.vim/autoload/plug.vim"))
    " Ensure all needed directories exist  (Thanks @kapadiamush)
    execute 'mkdir -p ~/.vim/autoload'
    " Download the actual plugin manager
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/bundle')

" ----------------------------------------------------------------------------
"
"  Vim-Plug --- Minimalist Vim Plugin Manager
"
"  command:
"  :PlugInstall[name ...]
"    install plugins
"  :PlugUpdate[name ...]
"    install or update plugins
"  :PlugClean[!]
"    remove plugin not in list(bang version will clean without prompt)
"  :PlugStatus
"    check the status of plugins(e.g. load or not)
"  :PlugUpgrade
"    upgrade vim-plug itself
"  :PlugDiff
"    examine changes from the previous update and the pending changes
"  :PlugSnapshot[!] [output path]
"    generate script for restoring the current snapshot of the plugins
"
"  options:
"  branch / tag / commit => 插件 git 仓库选择
"  rtp                   => vim 插件包含在子文件夹
"  dir                   => 插件自定义文件夹
"  do                    => 定义插件安装钩子，传入字符串命令或者函数名
"  on                    => 满足条件懒加载
"  for                   => 文件类型懒加载
"  frozen                => 不随着更新除非具体表明
"
"  keybindings
"  in :PlugStatus state, press L to load plugin in cursor
"
"  more docs in github homepage
"  https://github.com/junegunn/vim-plug
"
" ----------------------------------------------------------------------------

" lazyload to rush ~~~
augroup lazyload
  autocmd!
  autocmd vimEnter * call plug#load('vim-devicons', 'vim-fugitive', 'lightline.vim', 'vim-gitgutter', 'vim-snippets', 'nerdtree-git-plugin')
                     \| autocmd! lazyload
augroup END

" -------------------------- Base ---------------------------

" https://github.com/wakatime/vim-wakatime - 1 - no-need-lazy
" Vim plugin for automatic time tracking and metrics generated from your programming activity
Plug 'wakatime/vim-wakatime'

" https://github.com/mhinz/vim-startify - 1 - not-support-lazy
" 🔗 The fancy start screen for Vim.
Plug 'mhinz/vim-startify'

" https://github.com/neoclide/coc.nvim - 0 - not-support-lazy
" Intellisense engine for vim8 & neovim, full language server protocol support as VSCode
Plug 'neoclide/coc.nvim', { 'tag': '*', 'do': 'yarn install --frozen-lockfile' }

" https://github.com/kopischke/vim-stay - 0 - not-support-lazy - 性能与上次位置有关
" Make Vim persist editing state without fuss
Plug 'kopischke/vim-stay'

" https://github.com/vim-scripts/open-browser.vim - 2 - lazy
" Open URI with your favorite browser from your favorite editor
Plug 'tyru/open-browser.vim', { 'on': '<Plug>(openbrowser-smart-search)' }

" https://github.com/sgur/vim-editorconfig - 0 - no-need-lazy
" Yet another EditorConfig (http://editorconfig.org) plugin for vim written in vimscript only
" Plug 'sgur/vim-editorconfig'

" -------------------------- UI Layout ---------------------------

" https://github.com/flazz/vim-colorschemes - 0 - no-need-lazy
" one colorscheme pack to rule them all!
Plug 'flazz/vim-colorschemes'

" https://github.com/itchyny/lightline.vim - 0 - lazy - 否则会拖慢
" A light and configurable statusline/tabline plugin for Vim
Plug 'itchyny/lightline.vim', { 'on': [] }

" https://github.com/ryanoasis/vim-devicons - 2 - lazy - 必须在 lightline 之前
" Adds file type glyphs/icons to popular Vim plugins: NERDTree, vim-airline, Powerline, Unite, vim-startify and more
" NOTE: Fonts: 安装 https://github.com/ryanoasis/nerd-fonts#option-4-homebrew-fonts 然后终端设置成该字体，字号 14 号（因为 emoji icon 太太，12 号不和谐）
Plug 'ryanoasis/vim-devicons', { 'on': [] }

" https://github.com/scrooloose/nerdtree - 0 - lazy - on-demand
" a tree explorer plugin for vim
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" https://github.com/Xuyuanp/nerdtree-git-plugin - 0 -lazy - not support on-demand
" A plugin of NERDTree showing git status
Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': [] }

" ----------------- As Programmer's Editor -----------------------

" https://github.com/scrooloose/nerdcommenter - 0 - not-support-lazy
" Vim plugin for intensely orgasmic commenting
Plug 'scrooloose/nerdcommenter'

" https://github.com/ctrlpvim/ctrlp.vim - 1 - lazy - on-demand
" Active fork of kien/ctrlp.vim—Fuzzy file, buffer, mru, tag, etc finder.
" Plug 'ctrlpvim/ctrlp.vim', { 'on': ['CtrlP', 'CtrlPMixed', 'CtrlPMRU'] }

" https://github.com/dyng/ctrlsf.vim - 0 - lazy - on-demand
" An ack.vim alternative mimics Ctrl-Shift-F on Sublime Text 2
Plug 'dyng/ctrlsf.vim', { 'on': ['CtrlSF'] }

" -------------------------- Working with Git --------------------------------

" https://github.com/airblade/vim-gitgutter - 0 - lazy
" A Vim plugin which shows a git diff in the gutter (sign column) and stages/undoes hunks.
Plug 'airblade/vim-gitgutter', { 'on' : [] }

" https://github.com/tpope/vim-fugitive - 1 - lazy
" fugitive.vim: A Git wrapper so awesome, it should be illegal
Plug 'tpope/vim-fugitive', { 'on': [] }

" --------------------------- Language Plugins ---------------------------------

" https://github.com/leafgarland/typescript-vim - 0 - no-need-lazy
" Typescript syntax files for Vim
Plug 'leafgarland/typescript-vim', { 'for': ['typescript'] }

" https://github.com/posva/vim-vue - 0 - no-need-lazy
" Syntax Highlight for Vue.js components
Plug 'posva/vim-vue', { 'for' : ['vue'] }

" https://github.com/iamcco/markdown-preview.nvim - no-need-lazy
" markdown preview plugin for (neo)vim
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install', 'for': [ 'markdown', 'md'] }

" https://github.com/Quramy/vim-js-pretty-template
" highlights JavaScript's Template Strings in other FileType syntax rule
" Plug 'Quramy/vim-js-pretty-template'

" https://github.com/maxmellon/vim-jsx-pretty
" 🔦 [Vim script] JSX syntax pretty highlighting for vim.
" Plug 'maxmellon/vim-jsx-pretty', { 'for': ['typescript.tsx', 'javascript.jsx'] }

" --------------------- Extras / Advanced ----------------------

" https://github.com/honza/vim-snippets - 1 - lazy
" vim-snipmate default snippets (Previously snipmate-snippets)
Plug 'honza/vim-snippets', { 'on': [] }

" https://github.com/Valloric/MatchTagAlways - 0 - lazy
" A Vim plugin that always highlights the enclosing html / xml tags
Plug 'Valloric/MatchTagAlways', { 'for' : ['html', 'vue'] }

" https://github.com/heavenshell/vim-jsdoc - 2 - lazy
" Generate JSDoc to your JavaScript code.
Plug 'heavenshell/vim-jsdoc', { 'for' : ['javascript', 'typescript'] }

" Add plugins to &runtimepath
call plug#end()

" -------------------------  Plugins-Specific Settings Start -------------------------

" mhinz/vim-startify {{
  function! s:filter_header(lines) abort
      let longest_line   = max(map(copy(a:lines), 'strwidth(v:val)'))
      let centered_lines = map(copy(a:lines),
          \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
      return centered_lines
  endfunction
  let g:startify_custom_header = s:filter_header(startify#fortune#cowsay())
" }}


" neoclide/coc.nvim settings {{
  " 1. global installed extensions
  " NOTE: 还有些 github vscode snippets 没列出来，不稳定，有的安装不上
  let g:coc_global_extensions=[
        \ 'coc-lists', 'coc-word', 'coc-emoji', 'coc-highlight', 'coc-pairs', 'coc-prettier',
        \ 'coc-json', 'coc-yaml', 'coc-html', 'coc-emmet', 'coc-css', 'coc-tsserver', 'coc-vetur',
        \ 'coc-eslint', 'coc-stylelint', 'coc-tslint-plugin',
        \ 'coc-snippets']


  " 2. Misc
  " Use <c-space> for trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()
  " coc-pairs 自动加空格，自己摸索了这种方法， 官方给的不行，不知道啥情况
  inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR><Up><End><CR>"
  " inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
  autocmd FileType markdown let b:coc_pairs_disabled = ['`']
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  " autocmd CursorHold * silent call CocActionAsync('doHover')

  " 3. Using CocList
  " Show all Lists
  nnoremap <silent> <space>l  :<C-u>CocList --number-select lists<cr>
  " Show all diagnostics
  nnoremap <silent> <space>d  :<C-u>CocList --number-select --auto-preview diagnostics<cr>
  " Manage extensions
  nnoremap <silent> <space>e  :<C-u>CocList --number-select extensions<cr>
  " Show commands
  nnoremap <silent> <space>c  :<C-u>CocList --number-select commands<cr>
  " Find symbol of current document
  nnoremap <silent> <space>o  :<C-u>CocList --number-select --auto-preview outline<cr>
  " Search workspace symbols
  nnoremap <silent> <C-p>  :<C-u>CocList --interactive --auto-preview --number-select files<cr>
  " nnoremap <silent> <leader>s  :<C-u>CocList --interactive --number-select symbols<cr>
  " Do default action for next item.
  " nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  " nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list
  nnoremap <silent> <space>r  :<C-u>CocListResume<CR>

  " 4. Buffer 内操作
  " 文本搜索当前词，等同于 / 内置命令，但多了列表聚合展示
  nnoremap <silent> <C-f> :exe 'CocList -I --normal --input='.expand('<cword>').' words'<CR>
  " 文本模糊搜索，等同于 fuzzy-search 插件

  " 5. 全局操作
  " 模糊搜索文件 - CocList files - 代替 CtrlP
  " 模糊搜索文本 - 暂无 - 代替 CtrlSF

  " 6. 补全配置
  " Use tab for trigger completion with characters ahead and navigate.
  " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  let g:coc_snippet_next = '<tab>'

  " 7. 跳转配置
  " core typings keymap
  " nmap <silent> <leader>pp <Plug>(coc-diagnostic-prev)
  " nmap <silent> <leader>nn <Plug>(coc-diagnostic-next)
  nmap <silent> <leader>d  <Plug>(coc-definition)
  nmap <silent> <leader>h  :call <SID>show_documentation()<CR>
  " code fix since ca is nerdtree used
  nmap <silent> <leader>cf <Plug>(coc-codeaction)
  nmap <silent> <leader>rn <Plug>(coc-rename)
  nmap <silent> <leader>rf <Plug>(coc-references)
  nmap <silent> <leader>td <Plug>(coc-type-definition)
  nmap <silent> <leader>ip <Plug>(coc-implementation)

  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " 8. 自定义命令
  function! SetupCommandAbbrs(from, to)
    exec 'cnoreabbrev <expr> '.a:from
          \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
          \ .'? ("'.a:to.'") : ("'.a:from.'"))'
  endfunction

  command! -nargs=? EditVimrc :call s:EditVimrc()
  function! s:EditVimrc()
    let p = $HOME.'/wow-my-dotfiles/.vimrc'
    if getcwd() == $HOME.'/wow-my-dotfiles/.vimrc'
      let p = p[len(getcwd()) + 1 : ]
    endif
    execute 'edit '.p
  endfunction

  command! -nargs=? EditVimrcPlugin :call s:EditVimrcPlugin()
  function! s:EditVimrcPlugin()
    let p = $HOME.'/wow-my-dotfiles/.vimrc.plugin'
    if getcwd() == $HOME.'/wow-my-dotfiles/.vimrc.plugin'
      let p = p[len(getcwd()) + 1 : ]
    endif
    execute 'edit '.p
  endfunction

  " to open coc config
  call SetupCommandAbbrs('config', 'CocConfig')
  call SetupCommandAbbrs('vimrc', 'EditVimrc')
  call SetupCommandAbbrs('vimrcplugin', 'EditVimrcPlugin')
  call SetupCommandAbbrs('blame', 'Gblame')
  call SetupCommandAbbrs('status', 'Gstatus')
  call SetupCommandAbbrs('log', 'Glog')

  " coc.nvim - prettier
  command! -nargs=0 Prettier :CocCommand prettier.formatFile
  nmap <leader>p :Prettier<CR>
" }}


" itchyny/lightline.vim {{
  let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'cocstatus', 'readonly', 'filename', 'coc' ] ]
      \ },
      \ 'component': {
      \   'coc': 'Powered By coc.nvim'
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'gitbranch': 'LightlineGitBranch',
      \   'cocstatus': 'LightlineCocStatus',
      \ },
      \ }

  function! LightlineFilename()
    let filename = expand('%:t') !=# '' ? expand('%:t') : '[ New File ]'
    let modified = &modified ? ' +' : ''
    return filename . modified . ' ' . WebDevIconsGetFileTypeSymbol()
  endfunction

  function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightlineGitBranch()
    return '| ⎇ ' . fugitive#head()
  endfunction

  function! LightlineCocStatus()
    return coc#status() != '' ? coc#status() : 'no info'
  endfunction
" }}


" ryanoasis/vim-devicons {{
  let g:WebDevIconsOS = 'Darwin'
  let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol='~'
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  let g:DevIconsEnableFolderPatternMatching = 1
  " autocmd VimEnter * call NERDTreeHighlightFile('vue', 'white', 'none', 'white', '#151515')
  " autocmd VimEnter * call NERDTreeHighlightFile('ts', 'white', 'none', 'white', '#151515')
  " autocmd VimEnter * call NERDTreeHighlightFile('js', 'white', 'none', 'white', '#151515')
  " autocmd VimEnter * call NERDTreeHighlightFile('html', 'green', 'none', 'green', '#151515')
  " autocmd VimEnter * call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
  " autocmd VimEnter * call NERDTreeHighlightFile('scss', 'cyan', 'none', 'cyan', '#151515')
  " autocmd VimEnter * call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
  " autocmd VimEnter * call NERDTreeHighlightFile('gitignore', '#686868', 'none', '#686868', '#151515')
  " autocmd VimEnter * call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
" }}

" leafgarland/typescript-vim {{
  " fix filetype settings
  autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx
  autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx
" }}


" {{ vim-nerdtree settings
  " let g:NERDTreeChDirMode = 2
  " NERDTrees File highlighting
  function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
  endfunction

  nmap <silent> <leader>t :NERDTreeToggle<CR>
  let NERDTreeHighlightCursorline=1
  let NERDTreeQuitOnOpen=1
  " show hidden files, add in 20160125
  let g:NERDTreeShowHidden=1
  let NERDTreeIgnore=[ '\.obj$', '\.o$', '\.so$', '\.egg$' ]
  "close vim if the only window left open is a NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" }}

" vim-stay setting {{
  " for vim-stay Plug recommend set
  autocmd FileType log let b:stay_ignore=1
  " reading log 20190402
  autocmd BufReadPost *.log normal! G
  set viewoptions=cursor,folds,slash,unix
" }}


" open-browser settings {{
  " if it looks like URI, Open URI under cursor.
  " Otherwise, Search word under cursor.
  nmap <C-g> <Plug>(openbrowser-smart-search)
" }}


" Valloric/MatchTagAlways settings {{
  let g:mta_filetypes = {
      \ 'html' : 1,
      \ 'xhtml' : 1,
      \ 'xml' : 1,
      \ 'javascript' : 1,
      \ 'jsx' : 1,
      \ 'typescript' : 1,
      \ 'tsx' : 1,
      \ 'vue' : 1,
      \}
" }}


" heavenshell/vim-jsdoc {{
  nmap <silent> <leader>dd <Plug>(jsdoc)
  let g:jsdoc_allow_input_prompt = 0
  let g:jsdoc_enable_es6 = 1
  let g:jsdoc_access_descriptions = 2
  let g:jsdoc_underscore_private = 1
  let g:jsdoc_custom_args_regex_only = 1
  let g:jsdoc_custom_args_hook = {
  \ '^\(callback\|cb\)$': {
  \   'type': ' {Function} ',
  \   'description': 'Callback function'
  \ },
  \ '\(err\|error\)$': {
  \   'type': '{Error}'
  \ },
  \ '^\(opt\|options\)$': {
  \   'type': '{Object}'
  \ },
  \ 'handler$': {
  \   'type': '{Function}'
  \ },
  \ '^\(n\|i\)$': {
  \   'type': ' {Number} '
  \ },
  \ '^i$': {
  \   'type': ' {Number} '
  \ },
  \ '^num': {
  \   'type': ' {Number} '
  \ },
  \ '^_\?\(is\|has\)': {
  \   'type': ' {Boolean} '
  \ },
  \ '^arr$': {
  \   'type': ' {Array} '
  \ },
  \ '^str$': {
  \   'type': ' {String} '
  \ },
  \ '^e$': {
  \   'type': ' {Event} '
  \ },
  \ 'el$': {
  \   'type': ' {Element} '
  \ },
  \ '^node$': {
  \   'type': ' {Element} '
  \ },
  \ '^o$': {
  \   'type': ' {Object} '
  \ },
  \ '^obj$': {
  \   'type': ' {Object} '
  \ },
  \ '^fn$': {
  \   'type': ' {Function} '
  \ },
  \}
" }}


" scrooloose/nerdcommenter settings {{
  " Add spaces after comment delimiters by default
  let g:NERDSpaceDelims = 1

  " Use compact syntax for prettified multi-line comments
  let g:NERDCompactSexyComs = 1

  " Align line-wise comment delimiters flush left instead of following code indentation
  let g:NERDDefaultAlign = 'left'

  " Allow commenting and inverting empty lines (useful when commenting a region)
  let g:NERDCommentEmptyLines = 1

  " Enable trimming of trailing whitespace when uncommenting
  let g:NERDTrimTrailingWhitespace = 1

  " Enable NERDCommenterToggle to check all selected lines is commented or not
  let g:NERDToggleCheckAllLines = 1

  let g:ft = ''
  function! NERDCommenter_before()
    if &ft == 'vue'
      let g:ft = 'vue'
      let stack = synstack(line('.'), col('.'))
      if len(stack) > 0
        let syn = synIDattr((stack)[0], 'name')
        if len(syn) > 0
          exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
        endif
      endif
    endif
  endfunction

  function! NERDCommenter_after()
    if g:ft == 'vue'
      setf vue
      let g:ft = ''
    endif
  endfunction
" }}


" CtrlP settings {{
  " nnoremap <silent> <C-p> :CtrlP<CR>
  " " let g:ctrlp_map = '<C-p>'
  " " mixed mode is more useful and smart
  " let g:ctrlp_cmd = 'CtrlPMixed'
  " let g:ctrlp_working_path_mode = 'ra'
  "
  " let g:ctrlp_custom_ignore = {
  "     \ 'dir':  '\v[\/](node_modules|target|dist|build)|\.(git|hg|svn|rvm)$',
  "     \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
  "     \ }
  " let g:ctrlp_follow_symlinks=1
" }}


" CtrlSF Settings, based on ggreer/the_silver_searcher {{
  let g:ackprg = 'ag --nogroup --nocolor --column'
  nnoremap <leader>sf :CtrlSF
  let g:ctrlsf_auto_close = 0
  " 都有场景，暂时先 cwd 吧
  " let g:ctrlsf_default_root = 'project'
  let g:ctrlsf_default_root = 'cwd'
  let g:ctrlsf_mapping = {
      \ "next": "n",
      \ "prev": "N",
      \ }
" }}


" airblade/vim-gitgutter settings {{
  " Required after having changed the colorscheme
  hi clear SignColumn
" }}


" vim-vue settings {{
  let g:vue_disable_pre_processors=1
" }}

" iamcco/markdown-preview {{
  nnoremap <leader>m :MarkdownPreview<CR>
  nnoremap <leader>M :MarkdownPreviewStop<CR>
" }}


" Quramy/vim-js-pretty-template {{
  " Register tag name associated the filetype
  " autocmd FileType javascript JsPreTmpl
  " autocmd FileType javascript.jsx JsPreTmpl
  " autocmd FileType typescript JsPreTmpl
  " autocmd FileType javascript.tsx JsPreTmpl
  " autocmd FileType typescript syn clear foldBraces " For leafgarland/typescript-vim users only. Please see #1 for details.
" }}
