" ----------------------------------------------------------------------------
"
"                           Plugins and Settings v2.0.0
"                              Plug with 40 plugins
"
" ----------------------------------------------------------------------------

" Install vim-Plug if we don't already have it
if empty(glob("~/.vim/autoload/plug.vim"))
    " Ensure all needed directories exist  (Thanks @kapadiamush)
    execute 'mkdir -p ~/.vim/autoload'
    " Download the actual plugin manager
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/bundle')

" ----------------------------------------------------------------------------
"
"  vim-Plug --- Minimalist Vim Plugin Manager
"
"  command:
"  :PlugInstall[name ...]
"    install plugins
"  :PlugUpdate[name ...]
"    install or update plugins
"  :PlugClean[!] 
"    remove plugin not in list(bang version will clean without prompt)
"  :PlugStatus
"    check the status of plugins(e.g. load or not)
"  :PlugUpgrade
"    upgrade vim-plug itself
"  :PlugDiff
"    examine changes from the previous update and the pending changes
"  :PlugSnapshot[!] [output path]
"    generate script for restoring the current snapshot of the plugins
"
"  options:
"  branch / tag / commit => 插件git仓库选择
"  rtp                   => vim插件包含在子文件夹
"  dir                   => 插件自定义文件夹
"  do                    => 定义插件安装钩子，传入字符串命令或者函数名
"  on                    => 满足条件懒加载
"  for                   => 文件类型懒加载
"  frozen                => 不随着更新除非具体表明
"
"  keybindings
"  in :PlugStatus state, press L to load plugin in cursor
"
"  more docs in github homepage
"  https://github.com/junegunn/vim-plug
"
" ----------------------------------------------------------------------------

" lazy load to rush ~~~
augroup lazyload_UI
  autocmd!
  autocmd vimEnter * call plug#load('vim-gitgutter', 'tagbar', 'ctrlp.vim', 'ctrlsf.vim')
                     \| autocmd! lazyload_UI
augroup END

augroup lazyload_autocomplete
  autocmd!
  autocmd InsertEnter * call plug#load('YouCompleteMe', 'ultisnips', 'vim-snippets')
                     \| call youcompleteme#Enable() | autocmd! lazyload_autocomplete
augroup END

"augroup lazyload_syntastic
  "autocmd!
  "autocmd InsertEnter * call plug#load('syntastic', 'vim-eslint')
                     "\| autocmd! lazyload_syntastic
"augroup END

" Vundle backup, and do not load forever in Plug
"Plug 'VundleVim/Vundle.vim', { 'on' : [] }

" -------------------------- UI Layout ---------------------------
" https://github.com/vim-airline/vim-airline
Plug 'vim-airline/vim-airline'

" https://github.com/vim-airline/vim-airline
Plug 'vim-airline/vim-airline-themes'

" ----------------------- Vim Base Functions Improved ------------------------

" https://github.com/roxma/vim-paste-easy
" 不是很好用
" Plug 'roxma/vim-paste-easy'

" https://github.com/wakatime/vim-wakatime
" daily record
Plug 'wakatime/vim-wakatime'

" https://github.com/scrooloose/nerdtree
" a tree explorer plugin for vim
Plug 'scrooloose/nerdtree', { 'on' : 'NERDTreeToggle' }

" https://github.com/majutsushi/tagbar
" Vim Plug that displays tags in a window, ordered by scope
Plug 'majutsushi/tagbar', { 'on' : [] }

" https://github.com/907th/vim-auto-save
Plug 'vim-scripts/vim-auto-save'

" https://github.com/kopischke/vim-stay
" stay in where you leave
Plug 'kopischke/vim-stay'

" https://github.com/vim-scripts/open-browser.vim
" because of China you know, switch default search_engine to baidu in
" source code of Plugin 20150422, a great plugin, <C-g>
Plug 'tyru/open-browser.vim'
   
" https://github.com/amix/open_file_under_cursor.vim
" Open file under cursor when pressing gf(if the text is a path)
Plug 'amix/open_file_under_cursor.vim'

" https://github.com/ggVGc/vim-fuzzysearch
Plug 'ggVGc/vim-fuzzysearch'

" https://github.com/easymotion/vim-easymotion
" 不太会用...
" !Plug 'easymotion/vim-easymotion'

" ----------------- Vim as a programmer's text editor -----------------------
Plug 'prettier/vim-prettier', {
 \ 'do': 'yarn install',
 \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue'] }

" https://github.com/editorconfig/editorconfig-vim
Plug 'editorconfig/editorconfig-vim'

" https://github.com/Raimondi/delimitMate
" vim  auto-completion for quotes,parens,brackets, etc.
Plug 'Raimondi/delimitMate'

" https://github.com/scrooloose/nerdcommenter
" intensely orgasmic commenting <leader>cc, <leader>ci to toggle
Plug 'scrooloose/nerdcommenter'

" https://github.com/scrooloose/syntastic
" syntax checker for vim and you need a specific checker for real use
" Plug 'scrooloose/syntastic', { 'on' : [] }

" https://github.com/ruanyl/vim-eslint
" vim-eslint, wrap eslint.d to speed up the lint time within 160ms from 700ms+
Plug 'ruanyl/vim-eslint', { 'on' : [] }

" ES2015 code snippets (Optional)
Plug 'epilande/vim-es2015-snippets', { 'for': ['typescript', 'javascript', 'javascript.jsx', 'vue', 'html', 'tpl', 'tmpl'] }

" " React code snippets
Plug 'epilande/vim-react-snippets', { 'for': ['typescript', 'javascript', 'javascript.jsx', 'vue', 'html', 'tpl', 'tmpl'] }

" https://github.com/SirVer/ultisnips
Plug 'SirVer/ultisnips', { 'on' : [] }

" https://github.com/honza/vim-snippets
" Snippets are separated from the engine. Add this if you want them.
Plug 'honza/vim-snippets', { 'on' : [] }

" https://github.com/alexbyk/vim-ultisnips-react
"Plug 'alexbyk/vim-ultisnips-react', { 'on' : [], 'for': ['javascript', 'javascript.jsx'] }

" https://github.com/rstacruz/vim-ultisnips-css
" UtilSnips-css. useful, more snippets than emmet
Plug 'rstacruz/vim-ultisnips-css', { 'on' : [], 'for': ['html', 'vue', 'css', 'scss'] }

" https://github.com/Valloric/YouCompleteMe
" The last completer you need, support for javascript now, 201601
"Plug 'Valloric/YouCompleteMe', { 'on' : [], 'for' : ['c', 'cpp', 'javascript', 'jsx'], 'do' : './install.py --clang-completer --tern-completer' }
" install ycm manually in its own bundle package with install.py and arguments
Plug 'Valloric/YouCompleteMe', { 'on' : [] }

" https://github.com/marijnh/tern_for_vim
" for javascript, an engine, need into plugin package and npm install
" 20180812 use TSServer instead
"Plug 'marijnh/tern_for_vim', { 'on' : [] }

" https://github.com/ctrlpvim/ctrlp.vim
" go to anything like sublime
Plug 'ctrlpvim/ctrlp.vim', { 'on' : [] }

" https://github.com/dyng/ctrlsf.vim
Plug 'dyng/ctrlsf.vim', { 'on' : '<Plug>CtrlSFVwordExec' }

" https://github.com/terryma/vim-multiple-cursors
" sublime-like multiple line edit tool
Plug 'terryma/vim-multiple-cursors'

" vim sugar for the UNIX shell commands, rename, move, mkdir inner vim
Plug 'tpope/vim-eunuch'

" auto load vim scripts, know its function in 20160118, requirement for vim-easytags
" xPlugin 'xolox/vim-misc'

" automated tag file generation and syntax highlighting of tags in vim
" xPlugin 'xolox/vim-easytags'

" switch between source files and header files quickly
" xPlugin 'vim-scripts/a.vim'

" expand region to select and do all thing you want
" xPlugin 'terryma/vim-expand-region'

" rename the current file in the vim buffer + retain relative path, 20150714
" Plug 'danro/rename.vim'

" -------------------------- Working with Git --------------------------------

" https://github.com/airblade/vim-gitgutter
" show git diff in the file
Plug 'airblade/vim-gitgutter', { 'on' : [] }

" git wrapper, not really use
Plug 'tpope/vim-fugitive'

" --------------------------- Language plugins ---------------------------------

" https://github.com/othree/javascript-libraries-syntax.vim
Plug 'othree/javascript-libraries-syntax.vim'

" https://github.com/othree/html5.vim
" HTML5 omnicomplete and syntax
Plug 'othree/html5.vim', { 'for' : ['html', 'vue'] }

" https://github.com/othree/cakebaker/scss-syntax.vim
" for scss, seems not that required
Plug 'cakebaker/scss-syntax.vim', { 'for': ['html', 'vue'] }

" https://github.com/groenewege/vim-less
Plug 'groenewege/vim-less', { 'for': ['html', 'vue'] }

" https://github.com/othree/hail2u/vim-css3-syntax
" for css3, maybe conflict with scss-syntax, rm package's scss.vim will done
" don't forget to mv scss.vim to scss-bak.vim to avoid nested error highlight
Plug 'hail2u/vim-css3-syntax', { 'for': ['html', 'vue'] }

" https://github.com/pangloss/vim-javascript
" even worse highlight than raw vim
"Plug 'pangloss/vim-javascript'

" https://github.com/othree/javascript-libraries-syntax.vim
" js libs support
"Plug 'othree/javascript-libraries-syntax.vim', { 'for': ['html', 'vue', 'javascript', 'javascript.jsx'] }

" Enhanced javascript syntax file for Vim -->
" https://github.com/jelera/vim-javascript-syntax
" xPlugin 'jelera/vim-javascript-syntax'
"
" Yet another JavaScript Syntax for Vim 
" https://github.com/othree/yajs.vim
"Plug 'othree/yajs.vim'

Plug 'othree/es.next.syntax.vim',  { 'for': ['javascript', 'javascript.jsx', 'vue', 'html'] }

" https://github.com/isRuslan/vim-es6
Plug 'isRuslan/vim-es6', { 'for': ['javascript', 'javascript.jsx', 'vue', 'html'] }

" https://github.com/leafgarland/typescript-vim
Plug 'leafgarland/typescript-vim', { 'for': ['typescript', 'tsx'] }

" https://github.com/Quramy/tsuquyomi
Plug 'Quramy/tsuquyomi', { 'for': ['typescript', 'tsx'] }

" https://github.com/mxw/vim-jsx
" if config allow jsx in javascript, the plugin will auto make ext 'js' to
" 'javascript.jsx' which made people confused but no better way
Plug 'mxw/vim-jsx', { 'for' : ['javascript', 'jsx', 'javascript.jsx'] }

" https://github.com/posva/vim-vue, deal more condition
Plug 'posva/vim-vue', { 'for' : ['vue'] }

" https://github.com/hallison/vim-markdown
" for markdown
Plug 'hallison/vim-markdown', { 'for' : ['markdown', 'md'] }

" --------------------- Extras/Advanced web DEV plugins ----------------------
 
" https://github.com/gorodinskiy/vim-coloresque
" show color in html, css, scss file, like sublime plugin, very useful !
Plug 'gorodinskiy/vim-coloresque', { 'for' : ['html', 'css', 'scss', 'typescript', 'javascript', 'javascript.jsx', 'jsx', 'vue'] }

" https://github.com/Valloric/MatchTagAlways
" better and configurable 
Plug 'Valloric/MatchTagAlways', { 'for' : ['html'] }

" https://github.com/mattn/emmet-vim
" emmet
Plug 'mattn/emmet-vim', { 'for' : ['html', 'vue', 'css', 'scss'] }

" https://github.com/heavenshell/vim-jsdoc.
" usage: cursur in function and <leader>d(remaped) or :JsDoc
Plug 'heavenshell/vim-jsdoc', { 'for' : ['javascript', 'javascript.jsx', 'typescript'] }

" https://github.com/mattn/webapi-vim
" vim interface to Web API
Plug 'mattn/webapi-vim'

" https://github.com/mmozuras/vim-github-comment
"Plug 'mmozuras/vim-github-comment'
" Highlight and strip trailing whitespace,
" it's great, but too sensitive to use, drop in 20150427
"Plug 'ntpeters/vim-better-whitespace'
" Easily surround chunks of text
"Plug 'tpope/vim-surround'
" Align CSV files at commas, align Markdown tables, and more
"Plug 'godlygeek/tabular'
" Make tmux look like vim-airline (read README for extra instructions)
"Plug 'edkolev/tmuxline.vim'
" All the other syntax plugins I use
"Plug 'ekalinin/Dockerfile.vim'
"Plug 'digitaltoad/vim-jade'
"Plug 'tpope/vim-liquid'

" Add plugins to &runtimepath
call plug#end()


" -------------------------  Plugins-Specific Settings Start -------------------------

" ----- emmet settings, great to use Tab -----
let g:user_emmet_mode='i'
" let g:user_emmet_mode='a'
" it works, very luck and same with sublime, aha~,
" before set -> let g:user_emmet_leader_key='<C-Z>' work doesn't well...
let g:user_emmet_expandabbr_key = '<Tab>'
let g:user_emmet_install_global = 0
autocmd FileType html,vue,css,scss EmmetInstall


" ----- Valloric/MatchTagAlways settings -----
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jsx' : 1,
    \ 'javascript.jsx' : 1,
    \ 'javascript' : 1,
    \ 'typescript' : 1,
    \ 'vue' : 1,
    \}


" ----- bling/vim-airline settings -----
let g:airline_theme = 'badwolf'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_exclude_filename = []
let g:Powerline_symbols='fancy'
let g:airline_powerline_fonts=0
let Powerline_symbols='fancy'
let g:bufferline_echo=0

let g:airline_left_sep = '▶'
let g:airline_left_alt_sep = '❯'
let g:airline_right_sep = '◀'
let g:airline_right_alt_sep = '❮'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
set fillchars+=stl:\ ,stlnc:\

" Show PASTE if in paste mode
let g:airline_detect_paste=1
" Show airline for tabs too
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#branch#enabled=1


" ----- vim-nerdtree settings -----
" Open/close NERDTree Tabs with ;t
nmap <silent> <leader>t :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeQuitOnOpen=1
" show hidden files, add in 20160125
let g:NERDTreeShowHidden=1
let NERDTreeIgnore=[ '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

" ui in airline statusline
set statusline+=%#warningmsg#
if exists(":SyntasticCheck")
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
endif


" ---- othree/javascript-libraries-syntax.vim settings -----
let g:used_javascript_libs = 'underscore,react,ramda,vue'

" ----- ggVGc/vim-fuzzysearch -----
" fuzzy search, 模糊搜索
nnoremap <C-f> :FuzzySearch<CR>


" ----- heavenshell/vim-jsdoc -----
" jsdoc remap hot key and make tmuxnav can use --- 20150524 remap in 20150915
nmap <silent> <leader>d <Plug>(jsdoc)


"----- scrooloose/nerdcommenter settings -----
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

" ----- majutsushi/tagbar settings -----
" Open/close tagbar with ;b
" require ctags, jsctags
" npm install -g git+https://github.com/ramitos/jsctags.git
" ----------------------------------------------------------------------------
nmap <silent> <leader>b :TagbarToggle<CR>
" let g:tagbar_type_javascript = {
"    \ 'ctagsbin' : 'jsctags'
"    \ }
let g:tagbar_autofocus = 1
let g:tagbar_width = 50

let g:ft = ''
function! NERDCommenter_before()
  if &ft == 'vue'
    let g:ft = 'vue'
    let stack = synstack(line('.'), col('.'))
    if len(stack) > 0
      let syn = synIDattr((stack)[0], 'name')
      if len(syn) > 0
        exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
      endif
    endif
  endif
endfunction
function! NERDCommenter_after()
  if g:ft == 'vue'
    setf vue
    let g:ft = ''
  endif
endfunction


" ----- airblade/vim-gitgutter settings -----
" Required after having changed the colorscheme
hi clear SignColumn
" In vim-airline, only display "hunks" if the diff is non-zero
let g:airline#extensions#hunks#non_zero_only = 1


" ----- Raimondi/delimitMate settings -----
let delimitMate_expand_cr = 1
augroup mydelimitMate
    au!
    au FileType markdown let b:delimitMate_nesting_quotes = ["`"]
    au FileType tex let b:delimitMate_quotes = ""
    au FileType tex let b:delimitMate_matchpairs = "(:),[:],{:},`:'"
    au FileType python let b:delimitMate_nesting_quotes = ['"', "'"]
augroup END


" ----- YouCompleteMe settings -----
"  required
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_min_num_identifier_candidate_chars = 2
cnoremap ydoc :YcmCompleter GetDoc
cnoremap ytype :YcmCompleter GetType
cnoremap ygoto :YcmCompleter GoTo
cnoremap ydef :YcmCompleter GoToDefinition
cnoremap yrefs :YcmCompleter GoToReferences
cnoremap yref :YcmCompleter GoToReferences

" ----- Tsuquyomi  settings -----
let g:tsuquyomi_disable_default_mappings = 1
let g:tsuquyomi_disable_quickfix = 1
autocmd FileType typescript nmap <buffer> <Leader>h : <C-u>echo tsuquyomi#hint()<CR>
nmap <leader>d :TsuDefinition<CR>
vmap <leader>d :TsuDefinition<CR>
nmap <leader>dt :TsuTypeDefinition<CR>
vmap <leader>dt :TsuTypeDefinition<CR>

" ----- vim-perttier settings -----
let g:prettier#exec_cmd_async = 1

" ----- vim-multiple-cursors settings -----
" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
    call youcompleteme#DisableCursorMovedAutocommands()
    let s:old_ycm_whitelist = g:ycm_filetype_whitelist
    let g:ycm_filetype_whitelist = {}
endfunction

" Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
    call youcompleteme#EnableCursorMovedAutocommands()
    let g:ycm_filetype_whitelist = s:old_ycm_whitelist
endfunction


" ----- CtrlP settings, open anything plugin like sublime -----
let g:ctrlp_map = '<c-p>'
" mixed mode is more useful and smart
let g:ctrlp_cmd = 'CtrlPMixed'
" 性能起见，只开启MRU模式, 大范围的文件夹跳转用autojump
"let g:ctrlp_cmd = 'CtrlPMRU'
let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_extensions = ['funky', 'ssh']

let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](node_modules|target|dist)|\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
let g:ctrlp_follow_symlinks=1

" ----- CtrlSF Settings, based on ggreer/the_silver_searcher ->  ag -----
let g:ackprg = 'ag --nogroup --nocolor --column'
nnoremap <leader>sf :CtrlSF
let g:ctrlsf_auto_close = 0
let g:ctrlsf_default_root = 'project'
let g:ctrlsf_mapping = {
    \ "next": "n",
    \ "prev": "N",
    \ }

" 使用 Ctrl + f 打开查找 
nmap     <leader>f <Plug>CtrlSFPrompt
vmap     <leader>f <Plug>CtrlSFVwordPath 
vmap     <leader>fF <Plug>CtrlSFVwordExec 
nmap     <leader>fn <Plug>CtrlSFCwordPath 
nmap     <leader>fp <Plug>CtrlSFPwordPath 
nnoremap <leader>fo :CtrlSFOpen<CR> 


" ----- vim-stay settings -----
" for vim-stay Plug recommend set
set viewoptions=cursor,folds,slash,unix


" ----- vim-autosave settings -----
" enable AutoSave on Vim startup"
let g:auto_save = 1  
" do not change the 'updatetime' option"
let g:auto_save_no_updatetime = 1  
" do not save while in insert mode"
let g:auto_save_in_insert_mode = 0  
" do not display the auto-save notification"
let g:auto_save_silent = 1  
" let g:auto_save_events = ["InsertLeave", "TextChanged"]


" ----- vim-jsx settings -----
" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" ----- vim-vue settings -----
let g:vue_disable_pre_processors=1

" ----- open-browser settings -----
" if it looks like URI, Open URI under cursor.
" Otherwise, Search word under cursor. 
nmap <C-g> <Plug>(openbrowser-smart-search)


" ----- UltiSnippets settings -----
" Trigger configuration. Do not use <tab> if you use YCM
let g:UltiSnipsExpandTrigger="<leader>i"
let g:UltiSnipsJumpForwardTrigger="F"
let g:UltiSnipsJumpBackwardTrigger="B"


" ----- EasyAlign settings -----
" 可以选中多行;不选中默认操作当前行
" ;a= 对齐等号表达
" ;a: 对齐冒号表达式(json/map等)
" ;a<space>  首个空格对齐
" ;a2<space> 第二个空格对齐
" ;a*<space> 所有空格依次对齐
" vmap <Leader>a <Plug>(EasyAlign)
" nmap <Leader>a <Plug>(EasyAlign)
" if !exists('g:easy_align_delimiters')
    " let g:easy_align_delimiters = {}
" endif
" let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }


" ----- vim-javascript and vim-javascript-syntax settings ------
"let g:javascript_enable_domhtmlcss = 1
"let g:javascript_conceal_function   = "ƒ"
"let g:javascript_conceal_null       = "ø"
"let g:javascript_conceal_this       = "@"
"let g:javascript_conceal_return     = "⇚"
"let g:javascript_conceal_undefined  = "¿"
"let g:javascript_conceal_NaN        = "ℕ"
"let g:javascript_conceal_prototype  = "¶"
"let g:javascript_conceal_static     = "•"
"let g:javascript_conceal_super      = "Ω"
"let g:html_indent_inctags = "html,body,head,tbody"
"let g:html_indent_script1 = "inc"
"let g:html_indent_style1 = "inc"

