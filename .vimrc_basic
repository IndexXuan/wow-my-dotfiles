"
"                _
"        __   __(_)_ __ ___
"        \ \ / /| | '_ ` _ \
"         \ V / | | | | | | | --- great and lovely
"          \_/  |_|_| |_| |_|
"
"
"  My vimrc, generated by all the love and help of the Internet
"
"
"  IndexXuan@gmail.com
"
"  https://github.com/IndexXuan
"
"  weibo@IndexXuan (http://weibo.com/u/3180300392)
"
"  !!!!!     basic of my vimrc, in server env use     !!!!!
"
"  including 4 parts:
"
"  remove plugin
"  
"  2. General Settings
"
"  4. Functions
"
"  5. KeyMap Settings
"
"  6. Temp Area 
"
"
"  copyright 2015 IndexXuan
"
"
"  test for ubuntu-14.04
"

set nocompatible

filetype off

" ------------------------- 2. General Settings Start -------------------------

" ----- leader key settings, great to use ';' -----
let mapleader = ";"
let g:mapleader = ";"

set backspace=indent,eol,start
" show line number
set number
" 显示当前的行号列号：
set ruler
" 在状态栏显示正在输入的命令
set showcmd
" 左下角显示当前vim模式
" set showmode

" 文内智能搜索提示 settings
" 高亮search命中的文本。
set hlsearch
" 打开增量搜索模式,随着键入即时搜索
set incsearch
" after search, press leader + / or space to cancel highlight of search results, very useful.
" nmap <silent> <leader>/ :nohlsearch<CR>
nmap <silent> <Space> :nohlsearch<CR>
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
" ignore case if search pattern is all lowercase,
" case-sensitive otherwise
set smartcase

" highlight current line, a great set if you have great theme...
set cursorline

" backspace in Visual mode deletes selection
vnoremap <BS> d

syntax on

" no wrap line
set nowrap

" can use mouse
set mouse=a
"set bs=2                    "在insert模式下用退格键删除

" tab相关变更 20150722 update
set tabstop=2     " 设置Tab键的宽度        [等同的空格个数]
set shiftwidth=2  " 每一次缩进对应的空格数
set softtabstop=2 " 按退格键时可以一次删掉 2 个空格
set expandtab " control whether change tab to space, add in 20150722

set smarttab  " usage and intro as below
" break the set of below, tab not change to space, so comment it
" insert tabs on the start of a line according to
" shiftwidth, not tabstop 按退格键时可以一次删掉多个空格
" 将Tab自动转化成空格    [需要输入真正的Tab键时，使用
" Ctrl+V + Tab]
" 缩进时，取整 use multiple of shiftwidth when indenting
" with '<' and '>']
" retab! map
nnoremap -- :retab!<CR>

" 缩进配置
set smartindent   " Smart indent
set autoindent    " 打开自动缩进
" set cindent

set shiftround

"文件在vim之外修改过，自动重新读入
set autoread 

"帮助系统设置为中文
set helplang=cn             

" 去掉错误提示音
set noeb

" 在处理未保存或只读文件时弹出确认
" set confirm

" 括号配对情况,跳转并高亮一下匹配的括号
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=1

" file format settings
set fileencodings=utf-8,gk2312,gbk,gb18030
set termencoding=utf-8
set fileformats=unix
set encoding=utf-8

set laststatus=2

set scrolloff=5

" 代码折叠 make large file slow ???
" set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
" set foldlevel=99
" set foldmethod=manual
"  可组合 {} () <> []使用
" zc 关闭当前打开的折叠
" zo 打开当前的折叠
" zm 关闭所有折叠
" zM 关闭所有折叠及其嵌套的折叠
" zr 打开所有折叠
" zR 打开所有折叠及其嵌套的折叠
" zd 删除当前折叠
" zE 删除所有折叠
" zj 移动至下一个折叠
" zk 移动至上一个折叠
" zn 禁用折叠
" zN 启用折叠

" load when other editor change it
set autoread

" ref --> http://www.cnblogs.com/jianyungsun/archive/2012/07/31/2616671.html
"set clipboard=unnamed,unnamedplus
set clipboard=unnamed


" nobackup
set nobackup
set noswapfile

" save itself
set autowrite 

" -------------------- Theme settings, very important and useful -------------------
set background=dark
" Set the colorscheme
"colorscheme monokai
colorscheme molokai
"colorscheme desertink 
"colorscheme late_evening
"colorscheme triplejelly

" set this to make airline and others show well
set t_Co=256

" ------------------------- 2. General Settings End -------------------------

" ------------------------- 4. Functions Start -------------------------

map <leader>a :call CompileRun()<CR>
function CompileRun()
    exec "w"
    if &filetype == 'c'
        exec "!gcc % -o %<"
        exec "! ./%<"
        exec "!time ./%<:"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'javascript'
        exec "!node %"
        exec "!clear"
    endif
endfunction

map <F12> :call Run()<CR>
func! Run()
    exec "w"
    if &filetype == 'c'
        exec "!gcc % -o %<"
        exec "! ./%<"
        exec "!time ./%<:"
    elseif &filetype == 'cpp'
        exec "!g++ % -o %<"
        exec "!time ./%<"
    elseif &filetype == 'java'
        exec "!javac %"
        exec "!time java -cp %:p:h %:t:r"
    elseif &filetype == 'html'
        exec "!google-chrome % &"
        exec "!clear"
    elseif &filetype == 'xml'
        exec "!google-chrome % &"
        exec "!clear"
    elseif &filetype == 'javascript'
        exec "!google-chrome % &"
        exec "!clear"
    endif
endfunc

" ----- auto-SetTitle when create file in target fileType -----
autocmd BufNewFile *.cpp,*.c,*.sh,*.java,*.css,*.js,*.scss exec ":call SetTitle()"
func SetTitle()
    if &filetype == 'sh'
        call setline(1,"\#################################################")
        call append(line("."),   "\# File Name: ".expand("%"))
        call append(line(".")+1, "\# Author: IndexXuan")
        call append(line(".")+2, "\# mail: indexxuan@gmail.com")
        call append(line(".")+3, "\# Created Time: ".strftime("%c"))
        call append(line(".")+4, "\#################################################")
        call append(line(".")+5, "\#!/bin/bash")
        call append(line(".")+6, "")
    else 
        call setline(1, "/*******************************************************")
        call append(line("."), "    > File Name: ".expand("%"))
        call append(line(".")+1, "    > Author: IndexXuan")
        call append(line(".")+2, "    > Mail: indexxuan@gmail.com")
        call append(line(".")+3, "    > Created Time: ".strftime("%c"))
        call append(line(".")+4, " ******************************************************/")
        call append(line(".")+5, "")
    endif

    if &filetype == 'c'
        call append(line(".") + 6, "#include <stdio.h>")
        call append(line(".") + 7, "")
    elseif &filetype =='cpp'
        call append(line(".") + 6, "#include <iostream>")
        call append(line(".") + 7, "using namespace std;")
        call append(line(".") + 8, "")
    endif
    " to the end of the file when file created
    autocmd BufNewFile * normal G
endfunc


function! JumpToCSS()
    let id_pos = searchpos("id", "nb", line('.'))[1]
    let class_pos = searchpos("class", "nb", line('.'))[1]

    if class_pos > 0 || id_pos > 0
        if class_pos < id_pos
            execute ":vim '#".expand('<cword>')."' **/*.css"
        elseif class_pos > id_pos
            execute ":vim '.".expand('<cword>')."' **/*.css"
        endif
    endif
endfunction

" do not have a good name...
nnoremap <leader>jc :call JumpToCSS()<CR>

" ------------------------- 4. functions End -------------------------


" ------------------------- 5. keyMap Settings Start -------------------------

" jj as Esc, very useful setting, great, great, great!!!
inoremap jj <Esc>

" toggle paste mode in vim, very useful. 20150709
set pastetoggle=<F5>

" indent global
nnoremap = gg=G

" find, very natural
map <C-f> /

" CTRL-A is Select all
"noremap <C-A> gggH<C-O>G
"inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
"cnoremap <C-A> <C-C>gggH<C-O>G
"onoremap <C-A> <C-C>gggH<C-O>G
"snoremap <C-A> <C-C>gggH<C-O>G
"xnoremap <C-A> <C-C>ggVG

" Cut, Paste, Copy
" vmap <C-x> d
" vmap <C-v> p
" vmap <C-c> y

" Undo, Redo (broken)
" nnoremap <C-z>  :undo<CR>
" inoremap <C-z>  <Esc>:undo<CR>
" nnoremap <C-r>  :redo<CR>
" inoremap <C-r>  <Esc>:redo<CR>

nmap <leader>w :w!<CR>
"nmap <leader>x :x<CR>
nmap <leader>q :x<CR>
nmap QQ :q!<CR>
nmap <leader>s :shell<CR>
map <leader>f :find<CR>

" use 'y' because in keyboard, y is after 't', so mean next tab ~
" mutil file edit is very often, 
" so tabnext is very important, so map to tt 20150714
nnoremap <C-y>  :tabnext<CR>
nnoremap tt     :tabnext<CR>
inoremap <C-y>  <Esc>:tabnext<CR>i

" add in 20150806, tab use often now
nnoremap rr     :tabprevious<CR> 
"inoremap <C-y>  <Esc>:tabpreviews<CR>i

nnoremap <C-t>  :tabnew<CR>
inoremap <C-t>  <Esc>:tabnew<CR>i
nnoremap <C-c>  :tabclose<CR>
inoremap <C-c>  <Esc>:tabclose<CR>i

" write to file which is not permitted
cmap w!! w !sudo tee % >/dev/null

" 命令行模式增强，ctrl - a到行首， -e 到行尾
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Change Working Directory to that of the current file, do not know usage
"cmap cwd :lcd %:p:h
"cmap cd :lcd %:p:h

" Quickfix open,
" if <leader>qf, will make <leader>q(to quit) very slow... you know, will wait
" for input done and then to quit...
nnoremap qf :copen<CR>

" 20150509, add some feature for fast and easy move
nmap b ^
nmap f $

" shell-like move
inoremap <C-b> <Left>
inoremap <c-f> <Right>
inoremap <C-n> <Down>
inoremap <C-p> <Up>
imap <C-a> <Home> 
imap <C-e> <End>
imap <C-d> <Del>
imap <C-h> <BS>
inoremap <C-u> <Esc>d0cl
inoremap <C-w> <Esc>dbcl

" jsdoc remap hot key and make tmuxnav can use --- 20150524 remap in 20150915
nmap <silent> <leader>d <Plug>(jsdoc)
"nnoremap <C-l> call:TmuxNavigateRight<CR>
" Y need remap for useful
nnoremap Y y$

" useful: delete to end
"nmap D d$
" delete to the line start
nnoremap DD d^

" 20150611, fast the jump, shift key is hard to press
nnoremap [ {
nnoremap ] }
nnoremap 9 (
nnoremap 0 )
nnoremap 5 %

" great, paste and auto in the bottom of the paste content, very useful!
vnoremap <silent> y y`]
nnoremap <slient> p p`]
nnoremap <silent> p p`]

" ------------------------- 5. keyMap Settings End -------------------------

