" ----------------------------------------------------------------------------
"
"                           Plugins and Settings v3.0.0
"                              Plug with 27 Plugins
"
" ----------------------------------------------------------------------------

" Install Vim-Plug if we don't already have it
if empty(glob("$HOME/.vim/autoload/plug.vim"))
    " Ensure all needed directories exist  (Thanks @kapadiamush)
    execute 'mkdir -p $HOME/.vim/autoload'
    " Download the actual plugin manager
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('$HOME/.vim/plugged')

" ----------------------------------------------------------------------------
"
"  Vim-Plug --- Minimalist Vim Plugin Manager
"
"  command:
"  :PlugInstall[name ...]
"    install plugins
"  :PlugUpdate[name ...]
"    install or update plugins
"  :PlugClean[!]
"    remove plugin not in list(bang version will clean without prompt)
"  :PlugStatus
"    check the status of plugins(e.g. load or not)
"  :PlugUpgrade
"    upgrade vim-plug itself
"  :PlugDiff
"    examine changes from the previous update and the pending changes
"  :PlugSnapshot[!] [output path]
"    generate script for restoring the current snapshot of the plugins
"
"  options:
"  branch / tag / commit => 插件 git 仓库选择
"  rtp                   => vim 插件包含在子文件夹
"  dir                   => 插件自定义文件夹
"  do                    => 定义插件安装钩子，传入字符串命令或者函数名
"  on                    => 满足条件懒加载
"  for                   => 文件类型懒加载
"  frozen                => 不随着更新除非具体表明
"
"  keybindings
"  in :PlugStatus state, press L to load plugin in cursor
"
"  more docs in github homepage
"  https://github.com/junegunn/vim-plug
"
" ----------------------------------------------------------------------------

" lazyload to rush ~~~
augroup lazyload
  autocmd!
  autocmd vimEnter * call plug#load('vim-fugitive', 'lightline.vim', 'vim-snippets')
                     \| autocmd! lazyload
augroup END

" -------------------------- Base ---------------------------

" https://github.com/wakatime/vim-wakatime - 1 - no-need-lazy
" Vim plugin for automatic time tracking and metrics generated from your programming activity
Plug 'wakatime/vim-wakatime'

" https://github.com/neoclide/coc.nvim - 0 - not-support-lazy
" Intellisense engine for vim8 & neovim, full language server protocol support as VSCode
Plug 'neoclide/coc.nvim', { 'tag': '*', 'do': 'yarn install --frozen-lockfile' }

" https://github.com/kopischke/vim-stay - 0 - not-support-lazy - 性能与上次位置有关
" Make Vim persist editing state without fuss
Plug 'kopischke/vim-stay'

" https://github.com/sgur/vim-editorconfig - 0 - no-need-lazy
" Yet another EditorConfig (http://editorconfig.org) plugin for vim written in vimscript only
Plug 'sgur/vim-editorconfig'

" https://github.com/mhinz/vim-startify - 1 - not-support-lazy
" 🔗 The fancy start screen for Vim.
Plug 'mhinz/vim-startify'

" https://github.com/jiangmiao/auto-pairs - 0 - no-no-need-lazy
" Vim plugin, insert or delete brackets, parens, quotes in pair
" NOTE: 现阶段 coc-pairs 不能自动加空行( 按照官方映射 CR 也不行 )，暂时先不用了
Plug 'jiangmiao/auto-pairs'

" https://github.com/tpope/vim-surround - 1 - no-no-need-lazy
" surround.vim: quoting/parenthesizing made simple
Plug 'tpope/vim-surround'

" https://github.com/tpope/vim-repeat - 1 - no-no-need-lazy
" repeat.vim: enable repeating supported plugin maps with "."
Plug 'tpope/vim-repeat'

" https://github.com/vim-scripts/open-browser.vim - 2 - lazy
" Open URI with your favorite browser from your favorite editor
Plug 'tyru/open-browser.vim', { 'on': '<Plug>(openbrowser-smart-search)' }

" -------------------------- UI Layout ---------------------------

" https://github.com/flazz/vim-colorschemes - 0 - no-need-lazy
" one colorscheme pack to rule them all!
" Plug 'flazz/vim-colorschemes'

" https://github.com/itchyny/lightline.vim - 0 - lazy - 否则会拖慢
" A light and configurable statusline/tabline plugin for Vim
Plug 'itchyny/lightline.vim', { 'on': [] }

" https://github.com/ryanoasis/vim-devicons - 2 - lazy - 为了美观，适配更多情况，直接启动
" Adds file type glyphs/icons to popular Vim plugins: NERDTree, vim-airline, Powerline, Unite, vim-startify and more
Plug 'ryanoasis/vim-devicons'

" https://github.com/scrooloose/nerdtree - 0 - no-need-lazy - 最常用功能，直接启用
" a tree explorer plugin for vim
Plug 'scrooloose/nerdtree'

" https://github.com/Xuyuanp/nerdtree-git-plugin - 1 - not-support-lazy - 跟随 NerdTree 直接启用
" A plugin of NERDTree showing git status
Plug 'Xuyuanp/nerdtree-git-plugin'

" https://github.com/tiagofumo/vim-nerdtree-syntax-highlight - 2 - lazy - 跟随 NerdTree 直接启用
" Extra syntax and highlight for nerdtree files
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" https://github.com/liuchengxu/vista.vim - 2 - no-lazy - 需要默认启动其功能，不能 lazy
" 🌵 View and search LSP symbols, tags in Vim
" NOTE: 用来取代 tagbar 插件，启动还好，使用起来很慢 ...
Plug 'liuchengxu/vista.vim'

" ----------------- As Programmer's Editor -----------------------

" https://github.com/scrooloose/nerdcommenter - 0 - not-support-lazy
" Vim plugin for intensely orgasmic commenting
Plug 'scrooloose/nerdcommenter'

" https://github.com/ctrlpvim/ctrlp.vim - 1 - lazy - on-demand
" Active fork of kien/ctrlp.vim—Fuzzy file, buffer, mru, tag, etc finder.
Plug 'ctrlpvim/ctrlp.vim', { 'on': ['CtrlP', 'CtrlPMixed', 'CtrlPMRU'] }

" https://github.com/dyng/ctrlsf.vim - 0 - lazy - on-demand
" An ack.vim alternative mimics Ctrl-Shift-F on Sublime Text 2
Plug 'dyng/ctrlsf.vim', { 'on': ['CtrlSF'] }

" https://github.com/junegunn/fzf#using-the-finder
" 🌸 A command-line fuzzy finder
" NOTE: If installed using Homebrew
" Plug '/usr/local/opt/fzf'

" -------------------------- Working with Git --------------------------------

" TODO: 启动很慢
" https://github.com/airblade/vim-gitgutter - 0 - not-support-lazy - 否则影响功能
" A Vim plugin which shows a git diff in the gutter (sign column) and stages/undoes hunks.
Plug 'airblade/vim-gitgutter'

" https://github.com/tpope/vim-fugitive - 1 - lazy
" fugitive.vim: A Git wrapper so awesome, it should be illegal
Plug 'tpope/vim-fugitive', { 'on': [] }

" --------------------------- Language Plugins ---------------------------------

" https://github.com/leafgarland/typescript-vim - 0 - no-need-lazy
" Typescript syntax files for Vim
Plug 'leafgarland/typescript-vim', { 'for': ['typescript'] }

" https://github.com/posva/vim-vue - 0 - no-need-lazy
" Syntax Highlight for Vue.js components
Plug 'posva/vim-vue', { 'for' : ['vue'] }

" https://github.com/iamcco/markdown-preview.nvim - no-need-lazy
" markdown preview plugin for (neo)vim
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install', 'for': [ 'markdown', 'md'] }

" https://github.com/Quramy/vim-js-pretty-template
" highlights JavaScript's Template Strings in other FileType syntax rule
" Plug 'Quramy/vim-js-pretty-template'

" https://github.com/maxmellon/vim-jsx-pretty
" 🔦 [Vim script] JSX syntax pretty highlighting for vim.
" Plug 'maxmellon/vim-jsx-pretty', { 'for': ['typescript.tsx', 'javascript.jsx'] }

" --------------------- Extras / Advanced ----------------------

" https://github.com/honza/vim-snippets - 1 - lazy
" vim-snipmate default snippets (Previously snipmate-snippets)
Plug 'honza/vim-snippets', { 'on': [] }

" https://github.com/Valloric/MatchTagAlways - 0 - lazy
" A Vim plugin that always highlights the enclosing html / xml tags
Plug 'Valloric/MatchTagAlways', { 'for' : ['html', 'vue'] }

" https://github.com/heavenshell/vim-jsdoc - 2 - lazy - 不支持 vue 文件，加了没也用
" Generate JSDoc to your JavaScript code.
Plug 'heavenshell/vim-jsdoc', { 'for' : ['javascript', 'typescript'] }

" Add plugins to &runtimepath
call plug#end()

" -------------------------  Plugins-Specific Settings Start -------------------------

" mhinz/vim-startify {{
  function! s:filter_header(lines) abort
      let longest_line   = max(map(copy(a:lines), 'strwidth(v:val)'))
      let centered_lines = map(copy(a:lines),
          \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
      return centered_lines
  endfunction
  let g:startify_custom_header = s:filter_header(startify#fortune#cowsay())
" }}


" neoclide/coc.nvim settings {{
  " 1. global installed extensions
  " NOTE: 还有些 github vscode snippets 没列出来，不稳定，有的安装不上
  " NOTE: 暂时先去掉了 coc-pairs
  let g:coc_global_extensions = [
        \ 'coc-lists', 'coc-word', 'coc-emoji', 'coc-highlight',
        \ 'coc-prettier', 'coc-tsserver', 'coc-vetur', 'coc-html', 'coc-emmet', 'coc-css', 'coc-json', 'coc-yaml',
        \ 'coc-eslint', 'coc-stylelint', 'coc-tslint-plugin',
        \ 'coc-snippets',
        \ 'https://github.com/walteribeiro/full-react-snippets.git#master',
        \ 'https://github.com/andys8/vscode-jest-snippets.git#master',
        \ 'https://github.com/hollowtree/vscode-vue-snippets.git#master']


  " 2. Misc
  " Use <c-space> for trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()
  " coc-pairs 自动加空格，官方给的不行，不知道啥情况
  " inoremap <silent><expr> <CR> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<C-r>=coc#on_enter()\<CR>"
  " NOTE: coc-pairs
  " autocmd FileType markdown let b:coc_pairs_disabled = ['`']
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  " autocmd CursorHold * silent call CocActionAsync('doHover')

  " 3. Using CocList
  " Show all Lists
  nnoremap <silent> <space>l  :<C-u>CocList --number-select lists<cr>
  " Show all diagnostics
  nnoremap <silent> <space>d  :<C-u>CocList --number-select --auto-preview diagnostics<cr>
  " Manage extensions
  nnoremap <silent> <space>e  :<C-u>CocList --number-select extensions<cr>
  " Show commands
  nnoremap <silent> <space>c  :<C-u>CocList --number-select commands<cr>
  " Find symbol of current document
  nnoremap <silent> <space>o  :<C-u>CocList --number-select --auto-preview outline<cr>
  " Search workspace symbols
  " nnoremap <silent> <C-p>  :<C-u>CocList --interactive --auto-preview --number-select files<cr>
  " nnoremap <silent> <leader>s  :<C-u>CocList --interactive --number-select symbols<cr>
  " Do default action for next item.
  " nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  " nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list
  nnoremap <silent> <space>r  :<C-u>CocListResume<CR>

  " 4. Buffer 内操作
  " 文本搜索当前词，等同于 / 内置命令，但多了列表聚合展示
  nnoremap <silent> <C-f> :exe 'CocList -I --normal --input='.expand('<cword>').' words'<CR>
  " 文本模糊搜索，等同于 fuzzy-search 插件

  " 5. 全局操作
  " 模糊搜索文件 - CocList files - 代替 CtrlP
  " 模糊搜索文本 - 暂无 - 代替 CtrlSF

  " 6. 补全配置
  " Use tab for trigger completion with characters ahead and navigate.
  " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  let g:coc_snippet_next = '<tab>'

  " 7. 跳转配置
  " core typings keymap
  " nmap <silent> <leader>pp <Plug>(coc-diagnostic-prev)
  " nmap <silent> <leader>nn <Plug>(coc-diagnostic-next)
  nmap <silent> <leader>d  <Plug>(coc-definition)
  nmap <silent> <leader>h  :call <SID>show_documentation()<CR>
  " code fix since ca is nerdtree used
  nmap <silent> <leader>cf <Plug>(coc-codeaction)
  nmap <silent> <leader>rn <Plug>(coc-rename)
  nmap <silent> <leader>rf <Plug>(coc-references)
  nmap <silent> <leader>td <Plug>(coc-type-definition)
  nmap <silent> <leader>ip <Plug>(coc-implementation)

  function! s:show_documentation()
    if &filetype == 'vim'
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " 8. 自定义命令
  function! SetupCommandAbbrs(from, to)
    exec 'cnoreabbrev <expr> '.a:from
          \ .' ((getcmdtype() ==# ":" && getcmdline() ==# "'.a:from.'")'
          \ .'? ("'.a:to.'") : ("'.a:from.'"))'
  endfunction

  command! -nargs=? EditVimrc :call s:EditVimrc()
  function! s:EditVimrc()
    let p = $HOME.'/wow-my-dotfiles/.vimrc'
    if getcwd() == $HOME.'/wow-my-dotfiles/.vimrc'
      let p = p[len(getcwd()) + 1 : ]
    endif
    execute 'edit '.p
  endfunction

  command! -nargs=? EditVimrcPlugin :call s:EditVimrcPlugin()
  function! s:EditVimrcPlugin()
    let p = $HOME.'/wow-my-dotfiles/.vimrc.plugin'
    if getcwd() == $HOME.'/wow-my-dotfiles/.vimrc.plugin'
      let p = p[len(getcwd()) + 1 : ]
    endif
    execute 'edit '.p
  endfunction

  " to open coc config
  call SetupCommandAbbrs('config', 'CocConfig')
  call SetupCommandAbbrs('vimrc', 'EditVimrc')
  call SetupCommandAbbrs('vimrcplugin', 'EditVimrcPlugin')
  call SetupCommandAbbrs('blame', 'Gblame')
  call SetupCommandAbbrs('status', 'Gstatus')
  call SetupCommandAbbrs('log', 'Glog')

  " coc.nvim - prettier
  command! -nargs=0 Prettier :CocCommand prettier.formatFile
  nmap <leader>p :Prettier<CR>
" }}


" itchyny/lightline.vim {{
  " NOTE: Fonts: 安装 https://github.com/ryanoasis/nerd-fonts#option-4-homebrew-fonts 然后终端设置成该字体，字号 14 号 ( 因为 emoji icon 太太，12 号不和谐，vertical 100% and horizontal < 100% )
  " NOTE: branch icon 等 from https://github.com/itchyny/lightline.vim/issues/353
  let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ 'active': {
      \   'left': [
      \     [ 'mode', 'paste', 'readonly' ],
      \     [ 'ctrlpmark', 'git', 'diagnostic', 'cocstatus', 'filename', 'nearestmethod', 'currentfunction' ]
      \   ],
      \   'right':[
      \     [ 'filetype', 'fileencoding', 'lineinfo', 'percent' ],
      \     [ 'coc' ]
      \   ],
      \ },
      \ 'inactive': {
      \   'left': [ ['mode', 'filename'] ],
      \   'right':[ ['lineinfo', 'percent'] ],
      \ },
      \ 'component': {
      \ },
      \ 'component_expand': {
      \   'diagnostic': 'LightlineCocDiagnostic',
      \   'cocstatus': 'LightlineCocStatus',
      \ },
      \ 'component_function': {
      \   'mode': 'LightlineMode',
      \   'readonly': 'LightLineReadonly',
      \   'ctrlpmark': 'CtrlPMark',
      \   'git': 'LightLineGit',
      \   'filename': 'LightlineFilename',
      \   'nearestmethod': 'NearestMethodOrFunction',
      \   'coc': 'LightlineCoc',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileEncoding',
      \   'lineinfo': 'LightLineLineInfo',
      \   'percent': 'LightlinePercent',
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }

  " 设置 statusline 根据屏幕大小隐藏部分组件的响应式阈值(脚本局部变量)
  let s:screen_xs = 30
  let s:screen_sm = 60
  let s:screen_md = 120
  let s:screen_lg = 150
  let s:screen_xl = 180

  function! LightlineMode()
	  let fname = expand('%:t')
	  return fname =~ 'NERD_tree' ? 'NERD' :
	        \ fname == 'ControlP' ? 'CtrlP' :
	        \ &filetype == 'ctrlsf' ? 'CtrlSF' :
	        \ &filetype == 'vista_kind' ? 'Vista' :
          \ &filetype == 'startify' ? 'Startify' :
	        \ winwidth(0) > s:screen_xs ? lightline#mode() : ''
	endfunction

  " like /etc/hosts readonly file
  function! LightLineReadonly()
	  let fname = expand('%:t')
    let ft = &filetype
    let isVista = ft == 'vista_kind'
    if isVista
      return ''
    endif
	  let isNerdTree = fname =~ 'NERD_tree'
    if isNerdTree
      return ''
    endif
    if &filetype == "help"
      return ''
    elseif &readonly
      return ""
    else
      return ''
    endif
  endfunction

  function! LightlineGitBranch()
    if exists("*fugitive#head")
      let _branch = fugitive#head()
      let parts = split(_branch, '/')
      let branch = strlen(_branch) > 12 ? parts[len(parts) - 1] : _branch
      let _ = strlen(branch) ? ' '. branch : ''
      return winwidth(0) > s:screen_md ? _ : ''
    endif
    return ''
  endfunction

  function! LightLineGitGutter()
    if ! exists('*GitGutterGetHunkSummary')
      return ''
    endif
    " let g:gitgutter_sign_added = "\u271a"
    " let g:gitgutter_sign_modified = "\u279c"
    " let g:gitgutter_sign_removed = "\u2718"
    let g:gitgutter_sign_added = "+"
    let g:gitgutter_sign_modified = "~"
    let g:gitgutter_sign_removed = "-"
    let symbols = [
          \ g:gitgutter_sign_added,
          \ g:gitgutter_sign_modified,
          \ g:gitgutter_sign_removed,
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    let msg = join(ret, ' ')
    let _ = len(ret) ? msg : ''
    return winwidth(0) > s:screen_lg ? _ : ''
  endfunction

  function! LightLineGit()
    let branch = LightlineGitBranch()
    let gutter = LightLineGitGutter()
    " return branch . (gutter != '' ? '☞ ' . gutter : '')
    return branch . (gutter != '' ? ' ¶ ' . gutter : '')
  endfunction

  function! LightlineCocDiagnostic() abort
    let info = get(b:, 'coc_diagnostic_info', {})
    if empty(info) | return '' | endif
    let msgs = []
    if get(info, 'error', 0)
      " call add(msgs, 'E' . info['error'])
      " call add(msgs, '⨶ ' . info['error'])
      " call add(msgs, '❌ ' . info['error']) " 颜色很好，但符号太大了，不太协调
      call add(msgs, '❎ ' . info['error'])
    endif
    if get(info, 'warning', 0)
      " call add(msgs, 'W' . info['warning'])
      " call add(msgs, '⚠ ' . info['warning'])
      call add(msgs, '⚠️  ' . info['warning'])
    endif
    return join(msgs, ' ')
  endfunction

  " NOTE: 展示 ts version & prettier，没啥意义，暂时注释掉
  function! LightlineCocStatus() abort
    return ''
    " return get(g:, 'coc_status', '')
  endfunction

  autocmd User CocDiagnosticChange call lightline#update()

  function! LightlineFilename()
    let isStartify = &filetype == 'startify'
    let filename = expand('%:t') !=# '' ? expand('%:t') : '[no name]'
    let modified = &modified ? ' +' : ''
    let _  = isStartify ? '' : filename . modified . ' ' . WebDevIconsGetFileTypeSymbol()
    return winwidth(0) > s:screen_sm ? _ : ''
  endfunction

  function! NearestMethodOrFunction()
    let f_icon = get(g:, 'eleline_function_icon', "\uf794 ")
    let name = get(b:, 'vista_nearest_method_or_function', '')
    let _ = name != '' ? f_icon . name : ''
    return winwidth(0) > s:screen_sm ? _ : ''
  endfunction

  " NOTE: 20190413 现阶段不如 vista NearestMethodOrFunction
  " function! CocCurrentFunction()
  "   return 'Ⓕ  ' . get(b:, 'coc_current_function', 'no info')
  " endfunction

  function! LightlineCoc()
    return winwidth(0) > s:screen_lg ? '⚡Powered By coc.nvim' : ''
  endfunction

  function! LightlineFiletype()
    let _ = &filetype !=# '' ? &filetype : 'no ft'
    return winwidth(0) > s:screen_lg ? _ : ''
  endfunction

  function! LightlineFileEncoding()
    let _ = &fileencoding . '[' . &fileformat . ']'
    return winwidth(0) > s:screen_lg ? _ : ''
  endfunction

  function! LightLineLineInfo()
    let _ = printf('㏑ %d:%-2d', line('.'), col('.'))
    return winwidth(0) > s:screen_sm ? _ : ''
  endfunction

  function! LightlinePercent()
    let _ = 'Ξ ' . (100 * line('.') / line('$')) . '%'
    return winwidth(0) > s:screen_xs ? _ : ''
  endfunction

  let g:ctrlp_status_func = {
        \ 'main': 'CtrlPStatusFunc_1',
        \ 'prog': 'CtrlPStatusFunc_2',
        \ }

  " NOTE: 强心重写了左侧，适配 CtrlP
  function! CtrlPMark()
    if expand('%:t') =~ 'ControlP'
      call lightline#link('iR'[g:lightline.ctrlp_regex])
      return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
            \ , g:lightline.ctrlp_next], 0)
    else
      return ''
    endif
  endfunction

  function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
    let g:lightline.ctrlp_regex = a:regex
    let g:lightline.ctrlp_prev = a:prev
    let g:lightline.ctrlp_item = a:item
    let g:lightline.ctrlp_next = a:next
    return lightline#statusline(0)
  endfunction

  function! CtrlPStatusFunc_2(str)
    return lightline#statusline(0)
  endfunction
" }}


" ryanoasis/vim-devicons {{
  let g:WebDevIconsOS = 'Darwin'
  " let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
  let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol='~'
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
  let g:DevIconsEnableFolderPatternMatching = 1
" }}

" leafgarland/typescript-vim {{
  " fix filetype settings
  autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx
  autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx
" }}


" {{ vim-nerdtree settings
  " Tree UI
  let g:NERDTreeDirArrowExpandable = '▸'
  let g:NERDTreeDirArrowCollapsible = '▾'

  " How can I open NERDTree automatically when vim starts up on opening a directory?
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

  " map
  nmap <silent> <leader>t :NERDTreeToggle<CR>
  " 进入文件自动关闭 Tree
  let NERDTreeQuitOnOpen=1
  " show hidden files, add in 20160125
  let g:NERDTreeShowHidden=1
  let NERDTreeIgnore = [ '\.obj$', '\.o$', '\.so$', '\.egg$' ]
  "close vim if the only window left open is a NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" }}

" tiagofumo/vim-nerdtree-syntax-highlight {{
  " NOTE: https://github.com/tiagofumo/vim-nerdtree-syntax-highlight/issues/30
  let s:git_orange = 'F54D27'
  let g:NERDTreeExtensionHighlightColor = {}
  let g:NERDTreeExtensionHighlightColor['vue'] = '42b883'
  let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
  let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " sets the color for .gitignore files
  let g:NERDTreeHighlightFolders = 1 " enables folder icon highlighting using exact match
  let g:NERDTreeHighlightFoldersFullName = 1 " highlights the folder name
" }}


" liuchengxu/vista.vim {{
  autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
  set runtimepath+=/usr/local/opt/fzf
  " Toggle Vista 弹窗
  nnoremap <leader>b :Vista!!<CR>
  " How each level is indented and what to prepend.
  " This could make the display more compact or more spacious.
  " e.g., more compact: ["▸ ", ""]
  " let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
  let g:vista_icon_indent = ["╰─ ", "-▸ "]

  " Executive used when opening vista sidebar without specifying it.
  " See all the avaliable executives via `:echo g:vista#executives`.
  let g:vista_default_executive = 'coc'

  let g:vista_echo_cursor_strategy = 'floating_win'
  let g:vista_sidebar_width = 40 " default 30
  let g:vista_cursor_delay = 300 " default 400
  let g:vista_blink = [3, 150] " default [2, 100]

  " Set the executive for some filetypes explicitly. Use the explicit executive
  " instead of the default one for these filetypes when using `:Vista` without
  " specifying the executive.
  let g:vista_executive_for = {
    \ 'typescript': 'coc',
    \ 'javascript': 'coc',
    \ }
" }}


" vim-stay setting {{
  " for vim-stay Plug recommend set
  autocmd FileType log let b:stay_ignore=1
  " reading log 20190402
  autocmd BufReadPost *.log normal! G
  set viewoptions=cursor,folds,slash,unix
" }}

" mhinz/vim-startify {{
  autocmd VimEnter *
              \   if !argc()
              \ |   Startify
              \ |   NERDTree
              \ |   wincmd w
              \ | endif
" }}

" open-browser settings {{
  " if it looks like URI, Open URI under cursor.
  " Otherwise, Search word under cursor.
  nmap <C-g> <Plug>(openbrowser-smart-search)
" }}


" Valloric/MatchTagAlways settings {{
  let g:mta_filetypes = {
      \ 'html' : 1,
      \ 'xhtml' : 1,
      \ 'xml' : 1,
      \ 'javascript' : 1,
      \ 'jsx' : 1,
      \ 'typescript' : 1,
      \ 'tsx' : 1,
      \ 'vue' : 1,
      \}
" }}


" heavenshell/vim-jsdoc {{
  nmap <silent> <leader>dd <Plug>(jsdoc)
  let g:jsdoc_allow_input_prompt = 0
  let g:jsdoc_enable_es6 = 1
  let g:jsdoc_access_descriptions = 2
  let g:jsdoc_underscore_private = 1
  let g:jsdoc_custom_args_regex_only = 1
  let g:jsdoc_custom_args_hook = {
  \ '^\(callback\|cb\)$': {
  \   'type': ' {Function} ',
  \   'description': 'Callback function'
  \ },
  \ '\(err\|error\)$': {
  \   'type': '{Error}'
  \ },
  \ '^\(opt\|options\)$': {
  \   'type': '{Object}'
  \ },
  \ 'handler$': {
  \   'type': '{Function}'
  \ },
  \ '^\(n\|i\)$': {
  \   'type': ' {Number} '
  \ },
  \ '^i$': {
  \   'type': ' {Number} '
  \ },
  \ '^num': {
  \   'type': ' {Number} '
  \ },
  \ '^_\?\(is\|has\)': {
  \   'type': ' {Boolean} '
  \ },
  \ '^arr$': {
  \   'type': ' {Array} '
  \ },
  \ '^str$': {
  \   'type': ' {String} '
  \ },
  \ '^e$': {
  \   'type': ' {Event} '
  \ },
  \ 'el$': {
  \   'type': ' {Element} '
  \ },
  \ '^node$': {
  \   'type': ' {Element} '
  \ },
  \ '^o$': {
  \   'type': ' {Object} '
  \ },
  \ '^obj$': {
  \   'type': ' {Object} '
  \ },
  \ '^fn$': {
  \   'type': ' {Function} '
  \ },
  \}
" }}


" scrooloose/nerdcommenter settings {{
  " Add spaces after comment delimiters by default
  let g:NERDSpaceDelims = 1

  " Use compact syntax for prettified multi-line comments
  let g:NERDCompactSexyComs = 1

  " Align line-wise comment delimiters flush left instead of following code indentation
  let g:NERDDefaultAlign = 'left'

  " Allow commenting and inverting empty lines (useful when commenting a region)
  let g:NERDCommentEmptyLines = 1

  " Enable trimming of trailing whitespace when uncommenting
  let g:NERDTrimTrailingWhitespace = 1

  " Enable NERDCommenterToggle to check all selected lines is commented or not
  let g:NERDToggleCheckAllLines = 1

  let g:ft = ''
  function! NERDCommenter_before()
    if &ft == 'vue'
      let g:ft = 'vue'
      let stack = synstack(line('.'), col('.'))
      if len(stack) > 0
        let syn = synIDattr((stack)[0], 'name')
        if len(syn) > 0
          exe 'setf ' . substitute(tolower(syn), '^vue_', '', '')
        endif
      endif
    endif
  endfunction

  function! NERDCommenter_after()
    if g:ft == 'vue'
      setf vue
      let g:ft = ''
    endif
  endfunction
" }}


" CtrlP settings {{
  nnoremap <silent> <C-p> :CtrlP<CR>
  " let g:ctrlp_map = '<C-p>'
  " mixed mode is more useful and smart
  let g:ctrlp_cmd = 'CtrlPMixed'
  let g:ctrlp_working_path_mode = 'ra'

  let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/](node_modules|target|dist|build)|\.(git|hg|svn|rvm)$',
      \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
      \ }
  let g:ctrlp_follow_symlinks=1
" }}


" CtrlSF Settings, based on ggreer/the_silver_searcher {{
  let g:ackprg = 'ag --nogroup --nocolor --column'
  nnoremap <leader>sf :CtrlSF
  let g:ctrlsf_auto_close = 0
  " 都有场景，暂时先 cwd 吧
  let g:ctrlsf_default_root = 'project'
  " let g:ctrlsf_default_root = 'cwd'
  let g:ctrlsf_mapping = {
      \ "next": "n",
      \ "prev": "N",
      \ }
" }}


" airblade/vim-gitgutter settings {{
  " Required after having changed the colorscheme
  hi clear SignColumn
" }}


" vim-vue settings {{
  let g:vue_disable_pre_processors=1
" }}

" iamcco/markdown-preview {{
  nnoremap <leader>m :MarkdownPreview<CR>
  nnoremap <leader>M :MarkdownPreviewStop<CR>
" }}


" Quramy/vim-js-pretty-template {{
  " Register tag name associated the filetype
  " autocmd FileType javascript JsPreTmpl
  " autocmd FileType javascript.jsx JsPreTmpl
  " autocmd FileType typescript JsPreTmpl
  " autocmd FileType javascript.tsx JsPreTmpl
  " autocmd FileType typescript syn clear foldBraces " For leafgarland/typescript-vim users only. Please see #1 for details.
" }}
